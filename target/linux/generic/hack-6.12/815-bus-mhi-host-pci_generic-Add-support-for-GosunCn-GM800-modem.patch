--- a/drivers/bus/mhi/host/pci_generic.c
+++ b/drivers/bus/mhi/host/pci_generic.c
@@ -718,12 +718,65 @@ static const struct mhi_pci_dev_info mhi
 	.sideband_wake = true,
 };
 
+static const struct mhi_channel_config mhi_gosuncn_gm800_channels[] = {
+	MHI_CHANNEL_CONFIG_UL(0, "LOOPBACK", 64, 2),
+	MHI_CHANNEL_CONFIG_DL(1, "LOOPBACK", 64, 2),
+	MHI_CHANNEL_CONFIG_UL(4, "DIAG", 64, 1),
+	MHI_CHANNEL_CONFIG_DL(5, "DIAG", 64, 3),
+	MHI_CHANNEL_CONFIG_UL(14, "QMI0", 64, 1),
+	MHI_CHANNEL_CONFIG_DL(15, "QMI0", 64, 2),
+	MHI_CHANNEL_CONFIG_UL(16, "QMI1", 64, 3),
+	MHI_CHANNEL_CONFIG_DL(17, "QMI1", 64, 3),
+	MHI_CHANNEL_CONFIG_UL(18, "IP_CTRL", 64, 1),
+	MHI_CHANNEL_CONFIG_DL_AUTOQUEUE(19, "IP_CTRL", 64, 1),
+	MHI_CHANNEL_CONFIG_UL(20, "IPCR", 64, 2),
+	MHI_CHANNEL_CONFIG_DL_AUTOQUEUE(21, "IPCR", 64, 2),
+	MHI_CHANNEL_CONFIG_UL(46, "IP_SW0", 512, 4),
+	MHI_CHANNEL_CONFIG_DL(47, "IP_SW0", 512, 5),
+	MHI_CHANNEL_CONFIG_HW_UL(100, "IP_HW0", 512, 6),
+	MHI_CHANNEL_CONFIG_HW_DL(101, "IP_HW0", 512, 7),
+};
+
+static struct mhi_event_config mhi_gosuncn_gm800_events[] = {
+	/* first ring is control+data ring */
+	MHI_EVENT_CONFIG_CTRL(0, 64),
+	/* DIAG dedicated event ring */
+	MHI_EVENT_CONFIG_DATA(1, 256),
+	MHI_EVENT_CONFIG_DATA(2, 256),
+	MHI_EVENT_CONFIG_DATA(3, 256),
+	/* Software channels dedicated event ring */
+	MHI_EVENT_CONFIG_SW_DATA(4, 1024),
+	MHI_EVENT_CONFIG_SW_DATA(5, 1024),
+	/* Hardware channels request dedicated hardware event rings */
+	MHI_EVENT_CONFIG_HW_DATA(6, 1024, 100),
+	MHI_EVENT_CONFIG_HW_DATA(7, 1024, 101),
+};
+
+static const struct mhi_controller_config modem_gosuncn_gm800_config = {
+	.max_channels = 110,
+	.timeout_ms = 60000,
+	.num_channels = ARRAY_SIZE(mhi_gosuncn_gm800_channels),
+	.ch_cfg = mhi_gosuncn_gm800_channels,
+	.num_events = ARRAY_SIZE(mhi_gosuncn_gm800_events),
+	.event_cfg = mhi_gosuncn_gm800_events,
+};
+
+static const struct mhi_pci_dev_info mhi_gosuncn_gm800_info = {
+	.name = "gosuncn-gm800",
+	.edl_trigger = false,
+	.config = &modem_gosuncn_gm800_config,
+	.bar_num = MHI_PCI_DEFAULT_BAR_NUM,
+	.dma_data_width = 32,
+	.mru_default = 32768,
+	.sideband_wake = false,
+};
+
 /* Keep the list sorted based on the PID. New VID should be added as the last entry */
 static const struct pci_device_id mhi_pci_id_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_QCOM, 0x0304),
 		.driver_data = (kernel_ulong_t) &mhi_qcom_sdx24_info },
 	{ PCI_DEVICE_SUB(PCI_VENDOR_ID_QCOM, 0x0306, PCI_VENDOR_ID_QCOM, 0x010c),
-		.driver_data = (kernel_ulong_t) &mhi_foxconn_sdx55_info },
+		.driver_data = (kernel_ulong_t) &mhi_gosuncn_gm800_info },
 	/* EM919x (sdx55), use the same vid:pid as qcom-sdx55m */
 	{ PCI_DEVICE_SUB(PCI_VENDOR_ID_QCOM, 0x0306, 0x18d7, 0x0200),
 		.driver_data = (kernel_ulong_t) &mhi_sierra_em919x_info },
